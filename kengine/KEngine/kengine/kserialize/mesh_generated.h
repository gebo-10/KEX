// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_KSERIALIZE_H_
#define FLATBUFFERS_GENERATED_MESH_KSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace kserialize {

struct Mesh;
struct MeshBuilder;
struct MeshT;

inline const flatbuffers::TypeTable *MeshTypeTable();

struct MeshT : public flatbuffers::NativeTable {
  typedef Mesh TableType;
  std::shared_ptr<kserialize::AssetCommon> asset_common{};
  std::vector<uint8_t> indices{};
  std::vector<uint8_t> position{};
  std::vector<uint8_t> color{};
  std::vector<uint8_t> normal{};
  std::vector<uint8_t> uv{};
};

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MeshT NativeTableType;
  typedef MeshBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MeshTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASSET_COMMON = 4,
    VT_INDICES = 6,
    VT_POSITION = 8,
    VT_COLOR = 10,
    VT_NORMAL = 12,
    VT_UV = 14
  };
  const kserialize::AssetCommon *asset_common() const {
    return GetStruct<const kserialize::AssetCommon *>(VT_ASSET_COMMON);
  }
  const flatbuffers::Vector<uint8_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INDICES);
  }
  const flatbuffers::Vector<uint8_t> *position() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_POSITION);
  }
  const flatbuffers::Vector<uint8_t> *color() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLOR);
  }
  const flatbuffers::Vector<uint8_t> *normal() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NORMAL);
  }
  const flatbuffers::Vector<uint8_t> *uv() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_UV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<kserialize::AssetCommon>(verifier, VT_ASSET_COMMON) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyVector(position()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyVector(color()) &&
           VerifyOffset(verifier, VT_NORMAL) &&
           verifier.VerifyVector(normal()) &&
           VerifyOffset(verifier, VT_UV) &&
           verifier.VerifyVector(uv()) &&
           verifier.EndTable();
  }
  MeshT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MeshT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Mesh> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MeshBuilder {
  typedef Mesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_asset_common(const kserialize::AssetCommon *asset_common) {
    fbb_.AddStruct(Mesh::VT_ASSET_COMMON, asset_common);
  }
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  void add_position(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> position) {
    fbb_.AddOffset(Mesh::VT_POSITION, position);
  }
  void add_color(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> color) {
    fbb_.AddOffset(Mesh::VT_COLOR, color);
  }
  void add_normal(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> normal) {
    fbb_.AddOffset(Mesh::VT_NORMAL, normal);
  }
  void add_uv(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uv) {
    fbb_.AddOffset(Mesh::VT_UV, uv);
  }
  explicit MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    const kserialize::AssetCommon *asset_common = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> indices = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> position = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> color = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> normal = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uv = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_uv(uv);
  builder_.add_normal(normal);
  builder_.add_color(color);
  builder_.add_position(position);
  builder_.add_indices(indices);
  builder_.add_asset_common(asset_common);
  return builder_.Finish();
}

struct Mesh::Traits {
  using type = Mesh;
  static auto constexpr Create = CreateMesh;
};

inline flatbuffers::Offset<Mesh> CreateMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const kserialize::AssetCommon *asset_common = 0,
    const std::vector<uint8_t> *indices = nullptr,
    const std::vector<uint8_t> *position = nullptr,
    const std::vector<uint8_t> *color = nullptr,
    const std::vector<uint8_t> *normal = nullptr,
    const std::vector<uint8_t> *uv = nullptr) {
  auto indices__ = indices ? _fbb.CreateVector<uint8_t>(*indices) : 0;
  auto position__ = position ? _fbb.CreateVector<uint8_t>(*position) : 0;
  auto color__ = color ? _fbb.CreateVector<uint8_t>(*color) : 0;
  auto normal__ = normal ? _fbb.CreateVector<uint8_t>(*normal) : 0;
  auto uv__ = uv ? _fbb.CreateVector<uint8_t>(*uv) : 0;
  return kserialize::CreateMesh(
      _fbb,
      asset_common,
      indices__,
      position__,
      color__,
      normal__,
      uv__);
}

flatbuffers::Offset<Mesh> CreateMesh(flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MeshT *Mesh::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<MeshT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Mesh::UnPackTo(MeshT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = asset_common(); if (_e) _o->asset_common = std::shared_ptr<kserialize::AssetCommon>(new kserialize::AssetCommon(*_e)); }
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->indices.begin()); } }
  { auto _e = position(); if (_e) { _o->position.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->position.begin()); } }
  { auto _e = color(); if (_e) { _o->color.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->color.begin()); } }
  { auto _e = normal(); if (_e) { _o->normal.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->normal.begin()); } }
  { auto _e = uv(); if (_e) { _o->uv.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->uv.begin()); } }
}

inline flatbuffers::Offset<Mesh> Mesh::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMesh(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Mesh> CreateMesh(flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MeshT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _asset_common = _o->asset_common ? _o->asset_common.get() : 0;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  auto _position = _o->position.size() ? _fbb.CreateVector(_o->position) : 0;
  auto _color = _o->color.size() ? _fbb.CreateVector(_o->color) : 0;
  auto _normal = _o->normal.size() ? _fbb.CreateVector(_o->normal) : 0;
  auto _uv = _o->uv.size() ? _fbb.CreateVector(_o->uv) : 0;
  return kserialize::CreateMesh(
      _fbb,
      _asset_common,
      _indices,
      _position,
      _color,
      _normal,
      _uv);
}

inline const flatbuffers::TypeTable *MeshTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    kserialize::AssetCommonTypeTable
  };
  static const char * const names[] = {
    "asset_common",
    "indices",
    "position",
    "color",
    "normal",
    "uv"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const kserialize::Mesh *GetMesh(const void *buf) {
  return flatbuffers::GetRoot<kserialize::Mesh>(buf);
}

inline const kserialize::Mesh *GetSizePrefixedMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<kserialize::Mesh>(buf);
}

inline bool VerifyMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<kserialize::Mesh>(nullptr);
}

inline bool VerifySizePrefixedMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<kserialize::Mesh>(nullptr);
}

inline void FinishMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kserialize::Mesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kserialize::Mesh> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::shared_ptr<kserialize::MeshT> UnPackMesh(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::shared_ptr<kserialize::MeshT>(GetMesh(buf)->UnPack(res));
}

inline std::shared_ptr<kserialize::MeshT> UnPackSizePrefixedMesh(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::shared_ptr<kserialize::MeshT>(GetSizePrefixedMesh(buf)->UnPack(res));
}

}  // namespace kserialize

#endif  // FLATBUFFERS_GENERATED_MESH_KSERIALIZE_H_
