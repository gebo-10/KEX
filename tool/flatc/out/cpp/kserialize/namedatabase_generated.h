// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAMEDATABASE_KSERIALIZE_H_
#define FLATBUFFERS_GENERATED_NAMEDATABASE_KSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

namespace kserialize {

struct Name;
struct NameBuilder;
struct NameT;

struct NameDatabase;
struct NameDatabaseBuilder;
struct NameDatabaseT;

inline const flatbuffers::TypeTable *NameTypeTable();

inline const flatbuffers::TypeTable *NameDatabaseTypeTable();

struct NameT : public flatbuffers::NativeTable {
  typedef Name TableType;
  uint32_t id = 0;
  std::string str{};
};

struct Name FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NameT NativeTableType;
  typedef NameBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NameTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_STR = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *str() const {
    return GetPointer<const flatbuffers::String *>(VT_STR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_STR) &&
           verifier.VerifyString(str()) &&
           verifier.EndTable();
  }
  NameT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NameT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Name> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NameT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NameBuilder {
  typedef Name Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Name::VT_ID, id, 0);
  }
  void add_str(flatbuffers::Offset<flatbuffers::String> str) {
    fbb_.AddOffset(Name::VT_STR, str);
  }
  explicit NameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Name> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Name>(end);
    return o;
  }
};

inline flatbuffers::Offset<Name> CreateName(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> str = 0) {
  NameBuilder builder_(_fbb);
  builder_.add_str(str);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Name::Traits {
  using type = Name;
  static auto constexpr Create = CreateName;
};

inline flatbuffers::Offset<Name> CreateNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *str = nullptr) {
  auto str__ = str ? _fbb.CreateString(str) : 0;
  return kserialize::CreateName(
      _fbb,
      id,
      str__);
}

flatbuffers::Offset<Name> CreateName(flatbuffers::FlatBufferBuilder &_fbb, const NameT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NameDatabaseT : public flatbuffers::NativeTable {
  typedef NameDatabase TableType;
  std::vector<std::shared_ptr<kserialize::NameT>> names{};
};

struct NameDatabase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NameDatabaseT NativeTableType;
  typedef NameDatabaseBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NameDatabaseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAMES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<kserialize::Name>> *names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<kserialize::Name>> *>(VT_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfTables(names()) &&
           verifier.EndTable();
  }
  NameDatabaseT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NameDatabaseT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NameDatabase> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NameDatabaseT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NameDatabaseBuilder {
  typedef NameDatabase Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<kserialize::Name>>> names) {
    fbb_.AddOffset(NameDatabase::VT_NAMES, names);
  }
  explicit NameDatabaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NameDatabase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NameDatabase>(end);
    return o;
  }
};

inline flatbuffers::Offset<NameDatabase> CreateNameDatabase(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<kserialize::Name>>> names = 0) {
  NameDatabaseBuilder builder_(_fbb);
  builder_.add_names(names);
  return builder_.Finish();
}

struct NameDatabase::Traits {
  using type = NameDatabase;
  static auto constexpr Create = CreateNameDatabase;
};

inline flatbuffers::Offset<NameDatabase> CreateNameDatabaseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<kserialize::Name>> *names = nullptr) {
  auto names__ = names ? _fbb.CreateVector<flatbuffers::Offset<kserialize::Name>>(*names) : 0;
  return kserialize::CreateNameDatabase(
      _fbb,
      names__);
}

flatbuffers::Offset<NameDatabase> CreateNameDatabase(flatbuffers::FlatBufferBuilder &_fbb, const NameDatabaseT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline NameT *Name::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<NameT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Name::UnPackTo(NameT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = str(); if (_e) _o->str = _e->str(); }
}

inline flatbuffers::Offset<Name> Name::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NameT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateName(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Name> CreateName(flatbuffers::FlatBufferBuilder &_fbb, const NameT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NameT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _str = _o->str.empty() ? 0 : _fbb.CreateString(_o->str);
  return kserialize::CreateName(
      _fbb,
      _id,
      _str);
}

inline NameDatabaseT *NameDatabase::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<NameDatabaseT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NameDatabase::UnPackTo(NameDatabaseT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = names(); if (_e) { _o->names.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->names[_i] = std::shared_ptr<kserialize::NameT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<NameDatabase> NameDatabase::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NameDatabaseT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNameDatabase(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NameDatabase> CreateNameDatabase(flatbuffers::FlatBufferBuilder &_fbb, const NameDatabaseT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NameDatabaseT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _names = _o->names.size() ? _fbb.CreateVector<flatbuffers::Offset<kserialize::Name>> (_o->names.size(), [](size_t i, _VectorArgs *__va) { return CreateName(*__va->__fbb, __va->__o->names[i].get(), __va->__rehasher); }, &_va ) : 0;
  return kserialize::CreateNameDatabase(
      _fbb,
      _names);
}

inline const flatbuffers::TypeTable *NameTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "id",
    "str"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *NameDatabaseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    kserialize::NameTypeTable
  };
  static const char * const names[] = {
    "names"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const kserialize::NameDatabase *GetNameDatabase(const void *buf) {
  return flatbuffers::GetRoot<kserialize::NameDatabase>(buf);
}

inline const kserialize::NameDatabase *GetSizePrefixedNameDatabase(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<kserialize::NameDatabase>(buf);
}

inline bool VerifyNameDatabaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<kserialize::NameDatabase>(nullptr);
}

inline bool VerifySizePrefixedNameDatabaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<kserialize::NameDatabase>(nullptr);
}

inline void FinishNameDatabaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kserialize::NameDatabase> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNameDatabaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<kserialize::NameDatabase> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::shared_ptr<kserialize::NameDatabaseT> UnPackNameDatabase(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::shared_ptr<kserialize::NameDatabaseT>(GetNameDatabase(buf)->UnPack(res));
}

inline std::shared_ptr<kserialize::NameDatabaseT> UnPackSizePrefixedNameDatabase(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::shared_ptr<kserialize::NameDatabaseT>(GetSizePrefixedNameDatabase(buf)->UnPack(res));
}

}  // namespace kserialize

#endif  // FLATBUFFERS_GENERATED_NAMEDATABASE_KSERIALIZE_H_
