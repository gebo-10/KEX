// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace kserialize
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Mesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Mesh GetRootAsMesh(ByteBuffer _bb) { return GetRootAsMesh(_bb, new Mesh()); }
  public static Mesh GetRootAsMesh(ByteBuffer _bb, Mesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public kserialize.AssetCommon? AssetCommon { get { int o = __p.__offset(4); return o != 0 ? (kserialize.AssetCommon?)(new kserialize.AssetCommon()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public byte Indices(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int IndicesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIndicesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIndicesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIndicesArray() { return __p.__vector_as_array<byte>(6); }
  public byte Position(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PositionLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPositionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPositionArray() { return __p.__vector_as_array<byte>(8); }
  public byte Color(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ColorLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetColorArray() { return __p.__vector_as_array<byte>(10); }
  public byte Normal(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int NormalLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNormalBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNormalBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNormalArray() { return __p.__vector_as_array<byte>(12); }
  public byte Uv(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int UvLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUvBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUvBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUvArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<kserialize.Mesh> CreateMesh(FlatBufferBuilder builder,
      kserialize.AssetCommonT asset_common = null,
      VectorOffset indicesOffset = default(VectorOffset),
      VectorOffset positionOffset = default(VectorOffset),
      VectorOffset colorOffset = default(VectorOffset),
      VectorOffset normalOffset = default(VectorOffset),
      VectorOffset uvOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Mesh.AddUv(builder, uvOffset);
    Mesh.AddNormal(builder, normalOffset);
    Mesh.AddColor(builder, colorOffset);
    Mesh.AddPosition(builder, positionOffset);
    Mesh.AddIndices(builder, indicesOffset);
    Mesh.AddAssetCommon(builder, kserialize.AssetCommon.Pack(builder, asset_common));
    return Mesh.EndMesh(builder);
  }

  public static void StartMesh(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAssetCommon(FlatBufferBuilder builder, Offset<kserialize.AssetCommon> assetCommonOffset) { builder.AddStruct(0, assetCommonOffset.Value, 0); }
  public static void AddIndices(FlatBufferBuilder builder, VectorOffset indicesOffset) { builder.AddOffset(1, indicesOffset.Value, 0); }
  public static VectorOffset CreateIndicesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartIndicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset positionOffset) { builder.AddOffset(2, positionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddColor(FlatBufferBuilder builder, VectorOffset colorOffset) { builder.AddOffset(3, colorOffset.Value, 0); }
  public static VectorOffset CreateColorVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColorVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddNormal(FlatBufferBuilder builder, VectorOffset normalOffset) { builder.AddOffset(4, normalOffset.Value, 0); }
  public static VectorOffset CreateNormalVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartNormalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddUv(FlatBufferBuilder builder, VectorOffset uvOffset) { builder.AddOffset(5, uvOffset.Value, 0); }
  public static VectorOffset CreateUvVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUvVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartUvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<kserialize.Mesh> EndMesh(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<kserialize.Mesh>(o);
  }
  public static void FinishMeshBuffer(FlatBufferBuilder builder, Offset<kserialize.Mesh> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMeshBuffer(FlatBufferBuilder builder, Offset<kserialize.Mesh> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MeshT UnPack() {
    var _o = new MeshT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshT _o) {
    _o.AssetCommon = this.AssetCommon.HasValue ? this.AssetCommon.Value.UnPack() : null;
    _o.Indices = new List<byte>();
    for (var _j = 0; _j < this.IndicesLength; ++_j) {_o.Indices.Add(this.Indices(_j));}
    _o.Position = new List<byte>();
    for (var _j = 0; _j < this.PositionLength; ++_j) {_o.Position.Add(this.Position(_j));}
    _o.Color = new List<byte>();
    for (var _j = 0; _j < this.ColorLength; ++_j) {_o.Color.Add(this.Color(_j));}
    _o.Normal = new List<byte>();
    for (var _j = 0; _j < this.NormalLength; ++_j) {_o.Normal.Add(this.Normal(_j));}
    _o.Uv = new List<byte>();
    for (var _j = 0; _j < this.UvLength; ++_j) {_o.Uv.Add(this.Uv(_j));}
  }
  public static Offset<kserialize.Mesh> Pack(FlatBufferBuilder builder, MeshT _o) {
    if (_o == null) return default(Offset<kserialize.Mesh>);
    var _indices = default(VectorOffset);
    if (_o.Indices != null) {
      var __indices = _o.Indices.ToArray();
      _indices = CreateIndicesVector(builder, __indices);
    }
    var _position = default(VectorOffset);
    if (_o.Position != null) {
      var __position = _o.Position.ToArray();
      _position = CreatePositionVector(builder, __position);
    }
    var _color = default(VectorOffset);
    if (_o.Color != null) {
      var __color = _o.Color.ToArray();
      _color = CreateColorVector(builder, __color);
    }
    var _normal = default(VectorOffset);
    if (_o.Normal != null) {
      var __normal = _o.Normal.ToArray();
      _normal = CreateNormalVector(builder, __normal);
    }
    var _uv = default(VectorOffset);
    if (_o.Uv != null) {
      var __uv = _o.Uv.ToArray();
      _uv = CreateUvVector(builder, __uv);
    }
    return CreateMesh(
      builder,
      _o.AssetCommon,
      _indices,
      _position,
      _color,
      _normal,
      _uv);
  }
};

public class MeshT
{
  public kserialize.AssetCommonT AssetCommon { get; set; }
  public List<byte> Indices { get; set; }
  public List<byte> Position { get; set; }
  public List<byte> Color { get; set; }
  public List<byte> Normal { get; set; }
  public List<byte> Uv { get; set; }

  public MeshT() {
    this.AssetCommon = new kserialize.AssetCommonT();
    this.Indices = null;
    this.Position = null;
    this.Color = null;
    this.Normal = null;
    this.Uv = null;
  }
  public static MeshT DeserializeFromBinary(byte[] fbBuffer) {
    return Mesh.GetRootAsMesh(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Mesh.FinishMeshBuffer(fbb, Mesh.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
