// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace kserialize
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NameDatabase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static NameDatabase GetRootAsNameDatabase(ByteBuffer _bb) { return GetRootAsNameDatabase(_bb, new NameDatabase()); }
  public static NameDatabase GetRootAsNameDatabase(ByteBuffer _bb, NameDatabase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NameDatabase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public kserialize.Name? Names(int j) { int o = __p.__offset(4); return o != 0 ? (kserialize.Name?)(new kserialize.Name()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NamesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<kserialize.NameDatabase> CreateNameDatabase(FlatBufferBuilder builder,
      VectorOffset namesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    NameDatabase.AddNames(builder, namesOffset);
    return NameDatabase.EndNameDatabase(builder);
  }

  public static void StartNameDatabase(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNames(FlatBufferBuilder builder, VectorOffset namesOffset) { builder.AddOffset(0, namesOffset.Value, 0); }
  public static VectorOffset CreateNamesVector(FlatBufferBuilder builder, Offset<kserialize.Name>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNamesVectorBlock(FlatBufferBuilder builder, Offset<kserialize.Name>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<kserialize.NameDatabase> EndNameDatabase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<kserialize.NameDatabase>(o);
  }
  public static void FinishNameDatabaseBuffer(FlatBufferBuilder builder, Offset<kserialize.NameDatabase> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedNameDatabaseBuffer(FlatBufferBuilder builder, Offset<kserialize.NameDatabase> offset) { builder.FinishSizePrefixed(offset.Value); }
  public NameDatabaseT UnPack() {
    var _o = new NameDatabaseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NameDatabaseT _o) {
    _o.Names = new List<kserialize.NameT>();
    for (var _j = 0; _j < this.NamesLength; ++_j) {_o.Names.Add(this.Names(_j).HasValue ? this.Names(_j).Value.UnPack() : null);}
  }
  public static Offset<kserialize.NameDatabase> Pack(FlatBufferBuilder builder, NameDatabaseT _o) {
    if (_o == null) return default(Offset<kserialize.NameDatabase>);
    var _names = default(VectorOffset);
    if (_o.Names != null) {
      var __names = new Offset<kserialize.Name>[_o.Names.Count];
      for (var _j = 0; _j < __names.Length; ++_j) { __names[_j] = kserialize.Name.Pack(builder, _o.Names[_j]); }
      _names = CreateNamesVector(builder, __names);
    }
    return CreateNameDatabase(
      builder,
      _names);
  }
};

public class NameDatabaseT
{
  public List<kserialize.NameT> Names { get; set; }

  public NameDatabaseT() {
    this.Names = null;
  }
  public static NameDatabaseT DeserializeFromBinary(byte[] fbBuffer) {
    return NameDatabase.GetRootAsNameDatabase(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    NameDatabase.FinishNameDatabaseBuffer(fbb, NameDatabase.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
