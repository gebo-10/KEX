// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace kserialize
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RGB : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public RGB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte R { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte G { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte B { get { return __p.bb.Get(__p.bb_pos + 2); } }

  public static Offset<kserialize.RGB> CreateRGB(FlatBufferBuilder builder, byte R, byte G, byte B) {
    builder.Prep(1, 3);
    builder.PutByte(B);
    builder.PutByte(G);
    builder.PutByte(R);
    return new Offset<kserialize.RGB>(builder.Offset);
  }
  public RGBT UnPack() {
    var _o = new RGBT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RGBT _o) {
    _o.R = this.R;
    _o.G = this.G;
    _o.B = this.B;
  }
  public static Offset<kserialize.RGB> Pack(FlatBufferBuilder builder, RGBT _o) {
    if (_o == null) return default(Offset<kserialize.RGB>);
    return CreateRGB(
      builder,
      _o.R,
      _o.G,
      _o.B);
  }
};

public class RGBT
{
  public byte R { get; set; }
  public byte G { get; set; }
  public byte B { get; set; }

  public RGBT() {
    this.R = 0;
    this.G = 0;
    this.B = 0;
  }
}


}
